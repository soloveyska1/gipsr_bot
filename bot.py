import os
import logging
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters, ConversationHandler
)
from dotenv import load_dotenv
import pandas as pd
from datetime import datetime, timedelta
import json
from telegram_bot_calendar import DetailedTelegramCalendar

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID'))  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID –≤ .env

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env")

if not ADMIN_CHAT_ID:
    raise ValueError("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ ADMIN_CHAT_ID –≤ —Ñ–∞–π–ª–µ .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ BASE_DIR –Ω–∞ –ø—É—Ç—å –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
BASE_DIR = os.path.join(os.path.expanduser("~"), "gipsr_bot", "Gipsr_Orders", "clients")

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs(BASE_DIR, exist_ok=True)
os.makedirs(os.path.join(BASE_DIR, 'feedbacks'), exist_ok=True)
os.makedirs(os.path.join(BASE_DIR, 'data'), exist_ok=True)  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

# –¢–∏–ø—ã –∑–∞–∫–∞–∑–æ–≤ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
ORDER_TYPES = {
    'self': {
        'name': '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
        'description': 'üí° –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∏–ª–∏ —ç—Å—Å–µ.'
    },
    'course_theory': {
        'name': '–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è)',
        'description': 'üìö –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –∫—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ - –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –Ω–µ –≤–∫–ª—é—á–∞—é—â–µ–µ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å.'
    },
    'course_empirical': {
        'name': '–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ (—Ç–µ–æ—Ä–∏—è + —ç–º–ø–∏—Ä–∏–∫–∞)',
        'description': 'üî¨ –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ —Å —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç—å—é –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö.'
    },
    'vkr': {
        'name': '–í–ö–†',
        'description': 'üéì –í—ã–ø—É—Å–∫–Ω–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ - –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è.'
    },
    'master': {
        'name': '–ú–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∞—è –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è',
        'description': 'üéì –ú–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∞—è –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è - –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–µ–ø–µ–Ω–∏ –º–∞–≥–∏—Å—Ç—Ä–∞.'
    }
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
referrals = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_orders = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
feedbacks = []

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–≤—à–∏—Ö —Å –±–æ—Ç–æ–º
user_ids = set()

# –†–µ–∂–∏–º—ã —Ü–µ–Ω (Hard Mode –∏ Light Mode)
PRICING_MODES = {
    'hard': {
        'name': 'Hard Mode',
        'description': 'üîπ –ï—Å–ª–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –º–µ–Ω—å—à–µ 7 –¥–Ω–µ–π, —Ü–µ–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 30%.\n'
                       'üîπ –ï—Å–ª–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Ç 8 –¥–æ 14 –¥–Ω–µ–π, —Ü–µ–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 15%.\n'
                       'üîπ –ï—Å–ª–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –±–æ–ª–µ–µ 14 –¥–Ω–µ–π, –¥–µ–π—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.'
    },
    'light': {
        'name': 'Light Mode',
        'description': 'üîπ –ï—Å–ª–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –º–µ–Ω—å—à–µ 2-3 –¥–Ω–µ–π, —Ü–µ–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 30%.\n'
                       'üîπ –ï—Å–ª–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ 7 –¥–Ω–µ–π –∏ –±–æ–ª–µ–µ, –¥–µ–π—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.'
    }
}

current_pricing_mode = 'light'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Light Mode

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    START,
    SELECT_MAIN_MENU,
    SELECT_ORDER_TYPE,
    INPUT_TOPIC,
    SELECT_DEADLINE_DATE,
    SELECT_SUPERVISOR_OPTION,
    INPUT_SUPERVISOR,
    SELECT_PRACTICE_BASE_OPTION,
    INPUT_PRACTICE_BASE,
    INPUT_PLAN_CHOICE,
    INPUT_PLAN_TEXT,
    UPLOAD_PLAN,
    CALCULATE_PRICE,
    CONFIRM_ORDER,
    LEAVE_FEEDBACK,
    ADMIN_MENU,
    ADMIN_BROADCAST,
    ADMIN_UPDATE_PRICES,
    ADMIN_UPDATE_ORDER_STATUS,
    PROFILE_MENU,
    DELETE_ORDER_CONFIRMATION,
    REPEAT_ORDER,
    ADMIN_CHANGE_PRICING_MODE,
    SHOW_PRICE_LIST,
    SHOW_FAQ
) = range(25)

# –¶–µ–Ω—ã (—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ prices.json –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data)
PRICES_FILE = os.path.join(os.path.dirname(__file__), 'data', 'prices.json')

def load_prices():
    with open(PRICES_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_prices(prices):
    with open(PRICES_FILE, 'w', encoding='utf-8') as f:
        json.dump(prices, f, ensure_ascii=False, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω
try:
    PRICES = load_prices()
except FileNotFoundError:
    PRICES = {
        'self': {'base': 1500},
        'course_theory': {'base': 7000},
        'course_empirical': {'base': 11000},
        'vkr': {'base': 32000},
        'master': {'base': 42000}
    }
    save_prices(PRICES)

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Ü–µ–Ω—ã —Å —É—á—ë—Ç–æ–º –¥–µ–¥–ª–∞–π–Ω–∞
def calculate_price(order_type_key, deadline_date):
    prices = PRICES.get(order_type_key, {'base': 0})
    base_price = prices.get('base', 0)

    # –†–∞—Å—á—ë—Ç –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
    days_left = (deadline_date - datetime.now()).days

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
    if current_pricing_mode == 'hard':
        if days_left <= 7:
            return int(base_price * 1.3)
        elif 8 <= days_left <= 14:
            return int(base_price * 1.15)
        else:
            return base_price
    elif current_pricing_mode == 'light':
        if days_left <= 3:
            return int(base_price * 1.3)
        elif days_left >= 7:
            return base_price
        else:
            return base_price  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    else:
        return base_price  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
class MyTranslationCalendar(DetailedTelegramCalendar):
    def __init__(self, **kwargs):
        super().__init__(locale='ru', **kwargs)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_ids.add(user.id)
    text = update.message.text
    args = text.split()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    if len(args) > 1:
        referrer_id = args[1]
        if referrer_id != str(user.id):
            referrals[user.id] = referrer_id
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            await context.bot.send_message(
                chat_id=int(referrer_id),
                text=f"üéâ –í–∞—à –¥—Ä—É–≥ {user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n"
                     "–ó–∞ –¥–µ–Ω–µ–∂–Ω–æ–π –≤—ã–ø–ª–∞—Ç–æ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞: @Thisissaymoon"
            )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    ref_link = f"https://t.me/{context.bot.username}?start={user.id}"
    context.user_data['ref_link'] = ref_link

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    return await main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üÜò *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥.\n"
        "/feedback ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ.\n"
        "\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É."
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    keyboard = [
        [InlineKeyboardButton("üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='make_order')],
        [InlineKeyboardButton("üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data='price_list')],
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
        [InlineKeyboardButton("üìÑ FAQ", callback_data='faq')],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url='https://t.me/Thisissaymoon')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    menu_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:\n\n"
        "üìù *–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑* ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.\n"
        "üí∞ *–ü—Ä–∞–π—Å-–ª–∏—Å—Ç* ‚Äî –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ —É—Å–ª—É–≥–∏.\n"
        "üë§ *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å* ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö.\n"
        "üìÑ *FAQ* ‚Äî –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "üìû *–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º* ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é."
    )

    if update.callback_query:
        await update.callback_query.message.edit_text(
            menu_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            menu_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    return SELECT_MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == 'make_order':
        return await select_order_type(update, context)
    elif choice == 'price_list':
        return await show_price_list(update, context)
    elif choice == 'profile':
        return await show_profile(update, context)
    elif choice == 'faq':
        return await show_faq(update, context)
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return SELECT_MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
async def show_price_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    price_list_text = "üí∞ *–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:*\n\n"
    for key, value in PRICES.items():
        order_info = ORDER_TYPES.get(key, {'name': key})
        order_name = order_info['name']
        base_price = value.get('base', 0)
        price_list_text += f"- {order_name}: –æ—Ç {base_price} —Ä—É–±.\n"

    pricing_mode_info = PRICING_MODES.get(current_pricing_mode, {})
    price_list_text += "\n*–ö–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ü–µ–Ω–∞:*\n"
    price_list_text += pricing_mode_info.get('description', '')

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(price_list_text, parse_mode='Markdown', reply_markup=reply_markup)
    return SHOW_PRICE_LIST  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ FAQ
async def show_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    faq_text = (
        "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
        "1Ô∏è‚É£ *–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?*\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.\n\n"
        "2Ô∏è‚É£ *–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å?*\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏. –ß–µ–º –±–ª–∏–∂–µ –¥–µ–¥–ª–∞–π–Ω, —Ç–µ–º –≤—ã—à–µ —Ü–µ–Ω–∞.\n\n"
        "3Ô∏è‚É£ *–ö–∞–∫ —è –º–æ–≥—É –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞?*\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö.\n\n"
        "4Ô∏è‚É£ *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞?*\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã.\n\n"
        "5Ô∏è‚É£ *–ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?*\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /feedback, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @Thisissaymoon"
    )
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(faq_text, parse_mode='Markdown', reply_markup=reply_markup)
    return SHOW_FAQ  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
async def select_order_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
    else:
        query = update

    keyboard = [
        [InlineKeyboardButton("üí° –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞", callback_data='self')],
        [InlineKeyboardButton("üìö –ö—É—Ä—Å–æ–≤–∞—è (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è)", callback_data='course_theory')],
        [InlineKeyboardButton("üî¨ –ö—É—Ä—Å–æ–≤–∞—è (—Ç–µ–æ—Ä–∏—è + —ç–º–ø–∏—Ä–∏–∫–∞)", callback_data='course_empirical')],
        [InlineKeyboardButton("üéì –í–ö–†", callback_data='vkr')],
        [InlineKeyboardButton("üéì –ú–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∞—è –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è", callback_data='master')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:",
            reply_markup=reply_markup
        )

    return SELECT_ORDER_TYPE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã
async def select_order_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    order_type_key = query.data

    if order_type_key == 'back_to_main':
        return await main_menu(update, context)

    if order_type_key not in ORDER_TYPES:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return SELECT_ORDER_TYPE

    order_info = ORDER_TYPES.get(order_type_key)
    order_name = order_info['name']
    description = order_info['description']
    context.user_data['order_type_key'] = order_type_key
    context.user_data['order_type'] = order_name

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_order_type')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{order_name}*\n\n"
        f"{description}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã:",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    return INPUT_TOPIC

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã
async def back_to_order_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await select_order_type(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–º—ã
async def input_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        topic = update.message.text
        context.user_data['topic'] = topic
        return await select_deadline_date(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞
async def select_deadline_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ —Ä–∞–±–æ—Ç—ã:")
    calendar, step = MyTranslationCalendar(min_date=datetime.now().date()).build()
    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {step}", reply_markup=calendar)
    return SELECT_DEADLINE_DATE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
async def handle_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    result, key, step = MyTranslationCalendar(min_date=datetime.now().date()).process(query.data)
    if not result and key:
        await query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {step}", reply_markup=key)
        return SELECT_DEADLINE_DATE
    elif result:
        context.user_data['deadline'] = datetime.combine(result, datetime.min.time())
        await query.message.edit_text(f"üóì –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {result.strftime('%d.%m.%Y')}")
        order_type_key = context.user_data.get('order_type_key')

        # –î–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—É—á–Ω–æ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ –∏ –±–∞–∑–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
        if order_type_key == 'self':
            context.user_data['supervisor'] = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            context.user_data['practice_base'] = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            return await ask_for_plan(query, context)
        else:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
            keyboard = [
                [InlineKeyboardButton("üßë‚Äçüè´ –£–∫–∞–∑–∞—Ç—å –§–ò–û –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", callback_data='enter_supervisor')],
                [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_supervisor')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_order_type')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ –§–ò–û –≤–∞—à–µ–≥–æ –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
                reply_markup=reply_markup
            )
            return SELECT_SUPERVISOR_OPTION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
async def select_supervisor_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'enter_supervisor':
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–∞—à–µ–≥–æ –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:")
        return INPUT_SUPERVISOR
    elif query.data == 'skip_supervisor':
        context.user_data['supervisor'] = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –±–∞–∑—É –ø—Ä–∞–∫—Ç–∏–∫–∏
        keyboard = [
            [InlineKeyboardButton("üè¢ –£–∫–∞–∑–∞—Ç—å –±–∞–∑—É –ø—Ä–∞–∫—Ç–∏–∫–∏", callback_data='enter_practice_base')],
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_practice_base')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_order_type')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –±–∞–∑—É –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
            reply_markup=reply_markup
        )
        return SELECT_PRACTICE_BASE_OPTION
    elif query.data == 'back_to_order_type':
        return await select_order_type(update, context)
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return SELECT_SUPERVISOR_OPTION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
async def input_supervisor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    supervisor = update.message.text
    context.user_data['supervisor'] = supervisor
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –±–∞–∑—É –ø—Ä–∞–∫—Ç–∏–∫–∏
    keyboard = [
        [InlineKeyboardButton("üè¢ –£–∫–∞–∑–∞—Ç—å –±–∞–∑—É –ø—Ä–∞–∫—Ç–∏–∫–∏", callback_data='enter_practice_base')],
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_practice_base')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_order_type')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –±–∞–∑—É –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
        reply_markup=reply_markup
    )
    return SELECT_PRACTICE_BASE_OPTION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏ –±–∞–∑—ã –ø—Ä–∞–∫—Ç–∏–∫–∏
async def select_practice_base_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'enter_practice_base':
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –ø—Ä–∞–∫—Ç–∏–∫–∏:")
        return INPUT_PRACTICE_BASE
    elif query.data == 'skip_practice_base':
        context.user_data['practice_base'] = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        return await ask_for_plan(query, context)
    elif query.data == 'back_to_order_type':
        return await select_order_type(update, context)
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return SELECT_PRACTICE_BASE_OPTION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –±–∞–∑—ã –ø—Ä–∞–∫—Ç–∏–∫–∏
async def input_practice_base(update: Update, context: ContextTypes.DEFAULT_TYPE):
    practice_base = update.message.text
    context.user_data['practice_base'] = practice_base
    return await ask_for_plan(update, context)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–ª–∞–Ω–∞
async def ask_for_plan(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–ª–∞–Ω–∞", callback_data='upload_plan')],
        [InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –ø–ª–∞–Ω –≤ —á–∞—Ç–µ", callback_data='write_plan')],
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_plan')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_order_type')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if isinstance(update_or_query, Update):
        await update_or_query.message.reply_text(
            "–£ –≤–∞—Å –µ—Å—Ç—å –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã? –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø–ª–∞–Ω–æ–º, –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –≤ —á–∞—Ç–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
            reply_markup=reply_markup
        )
    else:
        await update_or_query.message.reply_text(
            "–£ –≤–∞—Å –µ—Å—Ç—å –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã? –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –ø–ª–∞–Ω–æ–º, –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –≤ —á–∞—Ç–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
            reply_markup=reply_markup
        )
    return INPUT_PLAN_CHOICE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –ø–ª–∞–Ω–∞
async def input_plan_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data
    if choice == 'upload_plan':
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –ø–ª–∞–Ω–æ–º (–¥–æ–∫—É–º–µ–Ω—Ç–æ–º):")
        return UPLOAD_PLAN
    elif choice == 'write_plan':
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Ç–µ:")
        return INPUT_PLAN_TEXT
    elif choice == 'skip_plan':
        context.user_data['plan'] = '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
        return await calculate_price_step(query, context)
    elif choice == 'back_to_order_type':
        return await select_order_type(update, context)
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return INPUT_PLAN_CHOICE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–ª–∞–Ω–∞
async def upload_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if document:
        file = await document.get_file()
        user = update.effective_user
        client_name = user.username if user.username else f"user_{user.id}"
        order_type_key = context.user_data.get('order_type_key', 'unknown')
        order_type = context.user_data.get('order_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
        order_dir = os.path.join(BASE_DIR, client_name, order_type)

        os.makedirs(order_dir, exist_ok=True)
        file_path = os.path.join(order_dir, document.file_name)
        await file.download_to_drive(file_path)
        context.user_data['plan'] = f"–§–∞–π–ª: {document.file_name}"
        await update.message.reply_text("‚úÖ –§–∞–π–ª –ø–ª–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
        return UPLOAD_PLAN
    return await calculate_price_step(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–ª–∞–Ω–∞ –≤ —á–∞—Ç–µ
async def input_plan_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    plan_text = update.message.text
    context.user_data['plan'] = plan_text
    return await calculate_price_step(update, context)

# –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def calculate_price_step(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    order_type_key = data.get('order_type_key')
    deadline = data.get('deadline')

    if isinstance(deadline, datetime):
        deadline_date = deadline
    else:
        deadline_date = datetime.now() + timedelta(days=30)

    price = calculate_price(order_type_key, deadline_date)
    data['price'] = price

    confirm_text = (
        f"‚ú® *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {price} —Ä—É–±–ª–µ–π.*\n\n"
        "–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='confirm_order')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_order')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if isinstance(update_or_query, Update):
        await update_or_query.message.reply_text(confirm_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update_or_query.message.reply_text(confirm_text, reply_markup=reply_markup, parse_mode='Markdown')
    return CALCULATE_PRICE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = context.user_data

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
    user = update.effective_user
    client_name = user.username if user.username else f"user_{user.id}"
    order_type = data.get('order_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
    order_dir = os.path.join(BASE_DIR, client_name, order_type)
    os.makedirs(order_dir, exist_ok=True)
    order_filename = f"order_{len(os.listdir(order_dir)) + 1}.txt"
    order_path = os.path.join(order_dir, order_filename)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
    order_id = len(user_orders.get(user.id, [])) + 1
    order_data = {
        'order_id': order_id,
        'date': datetime.now(),
        'type': order_type,
        'topic': data.get('topic'),
        'deadline': data.get('deadline'),
        'price': data.get('price'),
        'status': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'
    }

    user_orders.setdefault(user.id, []).append(order_data)

    with open(order_path, 'w', encoding='utf-8') as f:
        f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username})\n")
        f.write(f"ID: {user.id}\n")
        f.write(f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {order_type}\n")
        f.write(f"–¢–µ–º–∞: {data.get('topic')}\n")
        f.write(f"–°—Ä–æ–∫–∏: {data.get('deadline').strftime('%d.%m.%Y')}\n")
        f.write(f"–ù–∞—É—á–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {data.get('supervisor', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
        f.write(f"–ë–∞–∑–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏: {data.get('practice_base', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n")
        f.write(f"–ü–ª–∞–Ω: {data.get('plan', '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω')}\n")
        f.write(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {data.get('price')} —Ä—É–±–ª–µ–π\n")
        f.write(f"–°—Ç–∞—Ç—É—Å: {order_data['status']}\n")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞
    excel_path = os.path.join(BASE_DIR, 'orders.xlsx')
    order_data_excel = {
        '–î–∞—Ç–∞': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': f"{user.first_name} (@{user.username})",
        'ID': user.id,
        '–¢–∏–ø —Ä–∞–±–æ—Ç—ã': order_type,
        '–¢–µ–º–∞': data.get('topic'),
        '–°—Ä–æ–∫–∏': data.get('deadline').strftime('%d.%m.%Y'),
        '–°—Ç–æ–∏–º–æ—Å—Ç—å': data.get('price'),
        '–°—Ç–∞—Ç—É—Å': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'
    }
    if os.path.exists(excel_path):
        df = pd.read_excel(excel_path)
        df = pd.concat([df, pd.DataFrame([order_data_excel])], ignore_index=True)
    else:
        df = pd.DataFrame([order_data_excel])
    df.to_excel(excel_path, index=False)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username}:*\n\n"
             f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {order_type}\n"
             f"–¢–µ–º–∞: {data.get('topic')}\n"
             f"–°—Ä–æ–∫–∏: {data.get('deadline').strftime('%d.%m.%Y')}\n"
             f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {data.get('price')} —Ä—É–±–ª–µ–π\n"
             f"ID –∑–∞–∫–∞–∑–∞: {order_id}\n"
             f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º. –≤ Excel-—Ñ–∞–π–ª–µ.",
        parse_mode='Markdown'
    )

    await query.message.reply_text(
        "‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!*\n\n–ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
        parse_mode='Markdown'
    )

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    return await main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
    )
    context.user_data.clear()
    return await main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback
async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    return LEAVE_FEEDBACK

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
async def receive_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    feedback_text = update.message.text
    feedback_dir = os.path.join(BASE_DIR, 'feedbacks', user.username or f"user_{user.id}")
    os.makedirs(feedback_dir, exist_ok=True)
    feedback_file = os.path.join(feedback_dir, f"feedback_{datetime.now().strftime('%Y%m%d%H%M%S')}.txt")
    with open(feedback_file, 'w', encoding='utf-8') as f:
        f.write(feedback_text)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üôè")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{user.username}:\n\n{feedback_text}"
    )
    return await main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    orders = user_orders.get(user.id, [])
    referral_count = sum(1 for ref in referrals.values() if ref == str(user.id))
    ref_link = context.user_data.get('ref_link', f"https://t.me/{context.bot.username}?start={user.id}")

    profile_text = f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
    profile_text += f"–ò–º—è: {user.first_name}\n"
    profile_text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_count}\n"
    profile_text += f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"

    if orders:
        profile_text += "üìã *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n"
        for order in orders:
            profile_text += (
                f"- ID –∑–∞–∫–∞–∑–∞: {order['order_id']}\n"
                f"  –¢–∏–ø: {order['type']}\n"
                f"  –¢–µ–º–∞: {order['topic']}\n"
                f"  –°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
            )
    else:
        profile_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n"

    keyboard = [
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='delete_order')],
        [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='repeat_order')],
        [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data='leave_feedback')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(profile_text, parse_mode='Markdown', reply_markup=reply_markup)
    return PROFILE_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
async def profile_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'delete_order':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        return DELETE_ORDER_CONFIRMATION
    elif data == 'repeat_order':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å:")
        return REPEAT_ORDER
    elif data == 'leave_feedback':
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
        return LEAVE_FEEDBACK
    elif data == 'back_to_main':
        return await main_menu(update, context)
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return PROFILE_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def delete_order_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    order_id_text = update.message.text.strip()
    try:
        order_id = int(order_id_text)
        orders = user_orders.get(user.id, [])
        order_found = False
        for order in orders:
            if order['order_id'] == order_id:
                orders.remove(order)
                order_found = True
                break
        if order_found:
            await update.message.reply_text(
                f"‚úÖ –ó–∞–∫–∞–∑ —Å ID {order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
                ])
            )
            return PROFILE_MENU
        else:
            await update.message.reply_text("–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return DELETE_ORDER_CONFIRMATION
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–∫–∞–∑–∞.")
        return DELETE_ORDER_CONFIRMATION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
async def repeat_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    return PROFILE_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    keyboard = [
        [InlineKeyboardButton("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤", callback_data='admin_view_orders')],
        [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data='admin_update_prices')],
        [InlineKeyboardButton("üí¨ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤", callback_data='admin_view_feedbacks')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data='admin_update_order_status')],
        [InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='admin_broadcast')],
        [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", callback_data='admin_change_pricing_mode')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main_admin')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
    return ADMIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é
async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if update.effective_user.id != ADMIN_CHAT_ID:
        await query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return SELECT_MAIN_MENU

    if query.data == 'admin_view_orders':
        await admin_view_orders(update, context)
        return ADMIN_MENU
    elif query.data == 'admin_update_prices':
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:")
        return ADMIN_UPDATE_PRICES
    elif query.data == 'admin_view_feedbacks':
        await admin_view_feedbacks(update, context)
        return ADMIN_MENU
    elif query.data == 'admin_update_order_status':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, ID –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        return ADMIN_UPDATE_ORDER_STATUS
    elif query.data == 'admin_broadcast':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        return ADMIN_BROADCAST
    elif query.data == 'admin_change_pricing_mode':
        await admin_change_pricing_mode(update, context)
        return ADMIN_CHANGE_PRICING_MODE
    elif query.data == 'back_to_main_admin':
        return await main_menu(update, context)
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return ADMIN_MENU

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def admin_view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    orders_text = "üìÑ *–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:*\n\n"
    for user_id, orders in user_orders.items():
        for order in orders:
            orders_text += (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
                f"ID –∑–∞–∫–∞–∑–∞: {order['order_id']}\n"
                f"–¢–∏–ø: {order['type']}\n"
                f"–¢–µ–º–∞: {order['topic']}\n"
                f"–°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
            )
    await update.callback_query.message.reply_text(orders_text or "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", parse_mode='Markdown')

async def admin_receive_new_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_prices_text = update.message.text
    try:
        new_prices = json.loads(new_prices_text)
        save_prices(new_prices)
        global PRICES
        PRICES = new_prices
        await update.message.reply_text("–¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except json.JSONDecodeError:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ADMIN_UPDATE_PRICES
    return ADMIN_MENU

async def admin_view_feedbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    feedbacks_dir = os.path.join(BASE_DIR, 'feedbacks')
    feedbacks_text = "üí¨ *–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
    if os.path.exists(feedbacks_dir):
        for user_dir in os.listdir(feedbacks_dir):
            user_feedback_dir = os.path.join(feedbacks_dir, user_dir)
            if os.path.isdir(user_feedback_dir):
                for feedback_file in os.listdir(user_feedback_dir):
                    feedback_file_path = os.path.join(feedbacks_dir, user_dir, feedback_file)
                    with open(feedback_file_path, 'r', encoding='utf-8') as f:
                        feedback_content = f.read()
                        feedbacks_text += f"–û—Ç @{user_dir}:\n{feedback_content}\n\n"
    else:
        feedbacks_text += "–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    await update.callback_query.message.reply_text(feedbacks_text, parse_mode='Markdown')

async def admin_receive_order_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id_str, order_id_str, new_status = update.message.text.strip().split(None, 2)
        user_id = int(user_id_str)
        order_id = int(order_id_str)
        orders = user_orders.get(user_id, [])
        for order in orders:
            if order['order_id'] == order_id:
                order['status'] = new_status
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üîî –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {new_status}"
                )
                await update.message.reply_text("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")
                return ADMIN_MENU
        await update.message.reply_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ADMIN_MENU
    except ValueError:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ADMIN_UPDATE_ORDER_STATUS

async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    success_count = 0
    for user_id in user_ids:
        try:
            await context.bot.send_message(chat_id=user_id, text=message)
            success_count += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    return ADMIN_MENU

async def admin_change_pricing_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üî¥ Hard Mode", callback_data='set_hard_mode')],
        [InlineKeyboardButton("üü¢ Light Mode", callback_data='set_light_mode')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_admin_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
    return ADMIN_CHANGE_PRICING_MODE

async def admin_change_pricing_mode_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    global current_pricing_mode
    if query.data == 'set_hard_mode':
        current_pricing_mode = 'hard'
        await query.message.reply_text("–†–µ–∂–∏–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ Hard Mode.")
        return ADMIN_MENU
    elif query.data == 'set_light_mode':
        current_pricing_mode = 'light'
        await query.message.reply_text("–†–µ–∂–∏–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ Light Mode.")
        return ADMIN_MENU
    elif query.data == 'back_to_admin_menu':
        return await admin_start(update, context)
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return ADMIN_CHANGE_PRICING_MODE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return await main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )

def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    user_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_MAIN_MENU: [
                CallbackQueryHandler(main_menu_handler),
                CallbackQueryHandler(back_to_main_menu, pattern='^back_to_main$')
            ],
            SHOW_PRICE_LIST: [
                CallbackQueryHandler(back_to_main_menu, pattern='^back_to_main$')
            ],
            SHOW_FAQ: [
                CallbackQueryHandler(back_to_main_menu, pattern='^back_to_main$')
            ],
            SELECT_ORDER_TYPE: [
                CallbackQueryHandler(select_order_type_callback),
                CallbackQueryHandler(back_to_main_menu, pattern='^back_to_main$')
            ],
            INPUT_TOPIC: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_topic),
                CallbackQueryHandler(back_to_order_type, pattern='^back_to_order_type$')
            ],
            SELECT_DEADLINE_DATE: [
                CallbackQueryHandler(handle_calendar),
                CallbackQueryHandler(back_to_order_type, pattern='^back_to_order_type$')
            ],
            SELECT_SUPERVISOR_OPTION: [
                CallbackQueryHandler(select_supervisor_option),
                CallbackQueryHandler(back_to_order_type, pattern='^back_to_order_type$')
            ],
            INPUT_SUPERVISOR: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_supervisor),
                CallbackQueryHandler(back_to_order_type, pattern='^back_to_order_type$')
            ],
            SELECT_PRACTICE_BASE_OPTION: [
                CallbackQueryHandler(select_practice_base_option),
                CallbackQueryHandler(back_to_order_type, pattern='^back_to_order_type$')
            ],
            INPUT_PRACTICE_BASE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_practice_base),
                CallbackQueryHandler(back_to_order_type, pattern='^back_to_order_type$')
            ],
            INPUT_PLAN_CHOICE: [
                CallbackQueryHandler(input_plan_choice),
                CallbackQueryHandler(back_to_order_type, pattern='^back_to_order_type$')
            ],
            INPUT_PLAN_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_plan_text),
                CallbackQueryHandler(back_to_order_type, pattern='^back_to_order_type$')
            ],
            UPLOAD_PLAN: [
                MessageHandler(filters.Document.ALL, upload_plan),
                CallbackQueryHandler(back_to_order_type, pattern='^back_to_order_type$')
            ],
            CALCULATE_PRICE: [
                CallbackQueryHandler(confirm_order, pattern='^confirm_order$'),
                CallbackQueryHandler(cancel_order, pattern='^cancel_order$')
            ],
            PROFILE_MENU: [
                CallbackQueryHandler(profile_menu_handler),
                CallbackQueryHandler(back_to_main_menu, pattern='^back_to_main$')
            ],
            DELETE_ORDER_CONFIRMATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, delete_order_confirmation),
                CallbackQueryHandler(back_to_main_menu, pattern='^back_to_main$')
            ],
            LEAVE_FEEDBACK: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_feedback)
            ],
            ADMIN_MENU: [
                CallbackQueryHandler(admin_menu_handler),
            ],
            ADMIN_UPDATE_PRICES: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_receive_new_prices)
            ],
            ADMIN_UPDATE_ORDER_STATUS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_receive_order_status)
            ],
            ADMIN_BROADCAST: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_broadcast)
            ],
            ADMIN_CHANGE_PRICING_MODE: [
                CallbackQueryHandler(admin_change_pricing_mode_handler)
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CommandHandler('admin', admin_start),
            CommandHandler('help', help_command)
        ],
        per_user=True,
        allow_reentry=True
    )

    application.add_handler(user_conv_handler)
    application.add_handler(CommandHandler('feedback', feedback))
    application.add_handler(CommandHandler('admin', admin_start))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
